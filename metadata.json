{
  "description": "Generated by Gemini.",
  "prompt": "\ncreate App as a Cloudflare Worker\n\n**Objective:*he worker's purpose is to automate the creation of social media posts based on the latest news from Bangladesh. It should be stateless and designed to be triggered by a cron job.\n\nThe entire process for a single run should execute the following logic from start to finish.\n\n---\n\n## Core Automation Workflow\n\nThe worker will execute a batch process that iterates through a predefined list of news categories. For each category, it will fetch news, analyze it to find the best article, generate a composite image, and send the final result to a webhook.\n\n### **Step 1: Initialization & Configuration**\n\nThe worker needs access to the following secrets and constants. These should be configured as environment variables in the Cloudflare Worker settings.\n\n**Secrets / API Keys:**\n*   `GEMINI_API_KEY`: `AIzaSyAp0A5k9v_03To0RNieHAhAPGEc_1gEuz4`\n*   `NEWSDATA_API_KEY`: `pub_1058e1309a4d4112a59c6f7847c1a98a`\n*   `CLOUDINARY_CLOUD_NAME`: `dukaroz3u`\n*   `CLOUDINARY_API_KEY`: `151158368369834`\n*   `CLOUDINARY_UPLOAD_PRESET`: `Autoupload` (This must be an **unsigned** upload preset)\n*   `MAKE_WEBHOOK_URL`: `https://hook.eu2.make.com/mvsz33n18i6dl18xynls7ie9gnoxzghl`\n*   `MAKE_WEBHOOK_AUTH_TOKEN`: `xR@7!pZ2#qLd$Vm8^tYe&WgC*oUeXsKv`\n\n**Constants:**\n*   `LOGO_URL`: `https://res.cloudinary.com/dy80ftu9k/image/upload/v1753507647/scs_cqidjz.png`\n*   `BRAND_TEXT`: `Dhaka Dispatch`\n*   `OVERLAY_IMAGE_URL`: `https://res.cloudinary.com/dy80ftu9k/image/upload/v1753644798/Untitled-1_hxkjvt.png`\n*   `NEWS_CATEGORIES`: \n    ```json\n    [\n      { \"name\": \"Trending\", \"apiValue\": \"top\" },\n      { \"name\": \"Politics\", \"apiValue\": \"politics\" },\n      { \"name\": \"Crime\", \"apiValue\": \"crime\" },\n      { \"name\": \"Entertainment\", \"apiValue\": \"entertainment\" },\n      { \"name\": \"Business/Corporate\", \"apiValue\": \"business\" }\n    ]\n    ```\n\n### **Step 2: Start Batch Process**\n\n1.  Initialize an empty `Set` to store the URLs of articles that have already been processed in this run to prevent duplicates.\n2.  Iterate through each category defined in `NEWS_CATEGORIES`.\n\n### **Step 3: Fetch News Articles (For Each Category)**\n\n1.  **Standard Categories:** For categories other than \"Trending\", make a `fetch` request to the NewsData.io API:\n    *   **URL:** `https://newsdata.io/api/1/news`\n    *   **Query Parameters:**\n        *   `apikey`: `NEWSDATA_API_KEY`\n        *   `country`: `bd`\n        *   `language`: `en`\n        *   `image`: `1`\n        *   `size`: `10`\n        *   `category`: The `apiValue` for the current category (e.g., `politics`).\n2.  **Special \"Trending\" Category:**\n    *   For the \"top\" category, first fetch articles from all *other* categories (`politics`, `crime`, etc.).\n    *   Combine all results into a single array.\n    *   Deduplicate the articles based on their `link`.\n    *   Sort the unique articles by `pubDate` in descending order (newest first).\n    *   Take the top 10 most recent articles.\n3.  **Filter Results:** From the fetched articles for the current category, filter out any that do not have both an `image_url` and either `content` or `description`.\n4.  **Check for Unused Articles:** Filter the list again to remove any articles whose `link` is already in the `Set` of used URLs. If no new articles remain, log a message and skip to the next category.\n\n### **Step 4: Analyze & Select Best Article with Gemini**\n\n1.  **Construct the Prompt:** Create a single, large prompt to send to the Gemini API. The prompt must contain the logic and the list of filtered, unused articles for the current category.\n    *   **Full Prompt Template (Mandatory):**\n        ```text\n        You are an expert news editor for a Bangladeshi social media channel. Your goal is to find the single most important, impactful, and relevant story for your audience from a list of recent articles.\n\n        **Your First Task: Select the Best Article**\n        - You will be given a list of news articles.\n        - Review all articles and select the ONE that is most newsworthy and DIRECTLY about Bangladesh.\n        - **CRITICAL RULE:** The article's main subject MUST be Bangladesh. News about other countries (e.g., India) is NOT relevant unless Bangladesh or a Bangladeshi entity is a primary subject of the article (e.g., a bilateral agreement). An article about Indian politics is irrelevant. Be extremely strict.\n        - If NONE of the articles meet this strict criteria, you MUST respond with ONLY the single word: IRRELEVANT.\n\n        **If you find a suitable article, proceed to Your Second Task:**\n        - Identify the article you chose by its ID.\n        - Perform a full analysis on ONLY that chosen article.\n\n        **Analysis Steps:**\n        **1. Headline Generation (IMPACT Principle):** Informative, Main Point, Prompting Curiosity, Active Voice, Concise, Targeted.\n        **2. Highlight Phrase Identification:** Identify key phrases from your new headline that capture critical information (entities, key terms, numbers). List these exact phrases, separated by commas.\n        **3. Image Prompt Generation (SCAT Principle & Safety):** Generate a concise, descriptive prompt for an AI image generator. The prompt MUST be safe for work and MUST NOT contain depictions of specific people (especially political figures), violence, conflict, or other sensitive topics. Instead, focus on symbolic, abstract, or neutral representations of the news. For example, for a political story, prompt \"Gavel on a table with a Bangladeshi flag in the background\" instead of showing politicians. The prompt should follow the SCAT principle (Subject, Context, Atmosphere, Type).\n        **4. Caption & Source:** Create a social media caption (~50 words) with 3-5 relevant hashtags.\n\n        **List of Articles to Analyze:**\n        [Inject the formatted list of articles here. Each article should be formatted as:]\n        ARTICLE [index + 1]:\n        ID: [index + 1]\n        Title: [article.title]\n        Content: [article.content or article.description]\n        Source: [article.source_id]\n        ---\n\n        **Output Format (Strict):**\n        - If no article is relevant, respond ONLY with: IRRELEVANT\n        - If you find a relevant article, respond ONLY with the following format. Do not add any other text or formatting. Each field must be on a new line.\n\n        CHOSEN_ID: [The ID number of the article you selected]\n        HEADLINE: [Your generated headline for the chosen article]\n        HIGHLIGHT_WORDS: [phrase 1, phrase 2]\n        IMAGE_PROMPT: [Your generated image prompt]\n        CAPTION: [Your generated caption. Crucially, DO NOT include the source name in the caption.]\n        SOURCE_NAME: [The source name (e.g., 'thedailystar') from the chosen article. This is a mandatory and separate field.]\n        ```\n\n2.  **Call Gemini API:**\n    *   Use the `@google/genai` library.\n    *   Model: `gemini-2.5-flash`.\n    *   Method: `ai.models.generateContent`.\n    *   Send the constructed prompt.\n\n3.  **Process Gemini Response:**\n    *   If the response text is `IRRELEVANT`, log it and move to the next category.\n    *   Otherwise, parse the structured text to extract `CHOSEN_ID`, `HEADLINE`, `HIGHLIGHT_WORDS`, `IMAGE_PROMPT`, `CAPTION`, and `SOURCE_NAME`.\n    *   Use the `CHOSEN_ID` to select the corresponding article from your list.\n    *   Add the chosen article's `link` to the `Set` of used URLs.\n\n### **Step 5: Prepare the Main Image**\n\n1.  Attempt to fetch the image from the `image_url` of the chosen article.\n2.  If fetching fails (e.g., 404, CORS error), call the Gemini Image Generation API:\n    *   Model: `imagen-3.0-generate-002`.\n    *   Method: `ai.models.generateImages`.\n    *   `prompt`: Use the `IMAGE_PROMPT` from the Gemini text analysis.\n    *   `config`: `numberOfImages: 1`, `outputMimeType: 'image/png'`, `aspectRatio: '4:3'`.\n    *   The result will be a base64 string. Prepend `data:image/png;base64,` to it. This becomes the image source for the next step.\n\n### **Step 6: Compose the Final Image**\n\nThis step requires a canvas library compatible with Cloudflare Workers (e.g., a pure JS port or a WASM-based one). The logic must exactly replicate the `composeImage` function from the original app.\n\n*   **Canvas:** 1080x1080 pixels.\n*   **Layer 1 (Background):** Fill with `white`.\n*   **Layer 2 (Main Image):**\n    *   Draw the image from Step 5 into the bottom 70% of the canvas (a 1080x756 pixel area at `y=324`).\n    *   The image must be drawn to cover this area, preserving its aspect ratio and cropping from the center (object-fit: cover behavior).\n*   **Layer 3 (Separator):** Draw a 5px thick `black` line at `y=322` to separate the headline area from the image.\n*   **Layer 4 (Headline):**\n    *   **Dynamic Font Size:** The font is `'Poppins', sans-serif`. Find the optimal font size (starting from `72px` and decreasing) so that the entire wrapped headline fits in the top white area with margins.\n    *   **Wrapping:** Wrap the `HEADLINE` text to fit the canvas width.\n    *   **Highlighting:** For each phrase in `HIGHLIGHT_WORDS`, draw a red (`#ef4444`) rectangle behind the text. Then draw the headline text in dark gray (`#111827`) on top.\n*   **Layer 5 (Overlay):** Draw the `OVERLAY_IMAGE_URL` over the entire canvas.\n*   **Layer 6 (Logo):** Draw the `LOGO_URL` image in the bottom-left corner.\n*   **Layer 7 (Brand Text):** Draw the `BRAND_TEXT` in the bottom-right corner. Font: `600 24px 'Inter', sans-serif`, color `white`, with a slight black shadow for readability.\n*   **Final Output:** Convert the canvas to a base64 data URL (`image/png`).\n\n### **Step 7: Upload Image to Cloudinary**\n\n1.  Make a `POST` request to `https://api.cloudinary.com/v1_1/${CLOUDINARY_CLOUD_NAME}/image/upload`.\n2.  Use `FormData` for the body.\n3.  Append three fields:\n    *   `file`: The base64 data URL from Step 6.\n    *   `api_key`: `CLOUDINARY_API_KEY`.\n    *   `upload_preset`: `CLOUDINARY_UPLOAD_PRESET`.\n4.  Parse the JSON response and extract the `secure_url` of the uploaded image.\n\n### **Step 8: Send Data to Webhook**\n\n1.  Make a `POST` request to the `MAKE_WEBHOOK_URL`.\n2.  **Headers:**\n    *   `Content-Type`: `application/json`\n    *   `x-make-apikey`: `MAKE_WEBHOOK_AUTH_TOKEN`\n3.  **Body (JSON Payload):**\n    ```json\n    {\n      \"headline\": \"[The HEADLINE from Gemini analysis]\",\n      \"imageUrl\": \"[The secure_url from Cloudinary]\",\n      \"summary\": \"[The CAPTION from Gemini analysis]\",\n      \"newsLink\": \"[The link of the chosen article]\",\n      \"status\": \"Queue\"\n    }\n    ```\n4.  If successful, log a success message. Then, proceed to the next category in the loop from Step 2.\n\n### **Error Handling**\n\nIf any step for a specific category fails (e.g., API error, parsing error), the worker should:\n1.  Log the detailed error.\n2.  Abort processing for that *single category*.\n3.  Continue to the next category in the list.\n\nThe entire worker execution should complete after the final category is processed or has failed.\n",
  "requestFramePermissions": [],
  "name": "App"
}